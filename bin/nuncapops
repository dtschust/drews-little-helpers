#!/usr/bin/env node

/* eslint-disable camelcase */

require('dotenv').config();
require('isomorphic-fetch');
const Twit = require('twit');
const mongoose = require('mongoose');

const now = Date.now();
const hour = new Date().getHours();

if (hour < 7 || hour >= 22) {
	console.log(`Hour is ${hour}. Will do nothing`);
	process.exit(0);
}

console.log('We are outside of "DnD" time, let us post some pops if we find any');

const T = new Twit({
	consumer_key: process.env.NUNCAPOPS_TWITTER_CONSUMER_KEY,
	consumer_secret: process.env.NUNCAPOPS_TWITTER_CONSUMER_SECRET,
	access_token: process.env.NUNCAPOPS_TWITTER_ACCESS_TOKEN,
	access_token_secret: process.env.NUNCAPOPS_TWITTER_ACCESS_TOKEN_SECRET,
	timeout_ms: 60 * 1000, // optional HTTP request timeout to apply to all requests.
	strictSSL: true, // optional - requires SSL certificates to be valid.
});

mongoose.Promise = global.Promise;
mongoose.connect(process.env.MONGO_DB_URI, {
	useNewUrlParser: true,
	useUnifiedTopology: true,
});
const SavedPinboardPops = mongoose.model('SavedPinboardPops', {
	savedUrls: Object,
});

const SHORT_URL_LENGTH = 23;
let SAVED_PINBOARD_POPS = {};
SavedPinboardPops.findOne(undefined)
	.exec()
	.then((newSavedPinboardPops) => {
		if (newSavedPinboardPops) {
			SAVED_PINBOARD_POPS = newSavedPinboardPops.savedUrls || {};
		}
		fetchAndProcessPinboardPops();
	})
	.catch((e) => {
		console.log('Huh, we have an error', e);
		process.exit(0);
	});

async function fetchAndProcessPinboardPops() {
	const pins = await fetch('https://feeds.pinboard.in/json/popular/').then((resp) => resp.json());

	const newPins = pins
		.filter(({ u: url }) => !SAVED_PINBOARD_POPS[getUrlKey(url)])
		// Only post at most 2 at a time.
		.slice(0, 2);

	if (newPins.length === 0) {
		console.log('No new pins to post');
		process.exit(0);
	}

	await Promise.all(
		newPins.map(({ u: url, d: title }) => {
			const truncatedTitle = title.slice(0, 280 - SHORT_URL_LENGTH - 1);

			return T.post('statuses/update', {
				status: `${truncatedTitle} ${url}`,
			})
				.then(() => {
					SAVED_PINBOARD_POPS[getUrlKey(url)] = now;
				})
				.catch((err) => {
					console.log(`Error posting ${title} ${url} to twitter. ${err}`);
				});
		})
	);

	console.log(`Posted ${newPins.length} pins, now let us persist to mongo!`);
	SavedPinboardPops.deleteMany(undefined, (err) => {
		if (err) {
			console.log('Error removing from database', err);
		}
		const newSavedPinboardPops = new SavedPinboardPops({
			savedUrls: SAVED_PINBOARD_POPS,
		});
		// store the new savedPinboardPops map!
		newSavedPinboardPops.save((saveErr) => {
			if (saveErr) {
				console.log('Error saving to database', saveErr);
			}

			process.exit(0);
		});
	});
}

function getUrlKey(url) {
	return url.replace(/\./g, ''); // can't store periods in keys for mongodb
}
