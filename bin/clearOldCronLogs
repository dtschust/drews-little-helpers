#!/usr/bin/env node

require('isomorphic-fetch');
require('dotenv').config();

const { getDrewsHelpfulRobot } = require('../src/utils/slack');

const { web } = getDrewsHelpfulRobot();

async function main() {
	const day = 86400000;
	const expirationDate = Date.now() - 1 * day;

	// TODO: theoretically I should support pagination here, but if I'm going to
	// delete 100 old messages every hour I shouldn't have a problem

	// Use the search API so that I also get threaded messages, conversations.history doesn't do that
	const response = await web.search.messages({
		query: `in:<#${process.env.CRON_LOGS_CHANNEL_ID}>`,
		count: 100,
	});

	const matches = (response && response.messages && response.messages.matches) || [];
	let numDeleted = 0;

	await Promise.all(
		matches.map(async (message) => {
			const { ts } = message;
			const time = parseInt(ts.split('.')[0], 10) * 1000;
			if (time < expirationDate) {
				// console.log('Need to delete this message: ', new Date(time) /* message.text */);
				return web
					.apiCall('chat.delete', {
						channel: process.env.CRON_LOGS_CHANNEL_ID,
						ts,
					})
					.then(() => {
						numDeleted += 1;
					});
			}

			return true;
		})
	);
	console.log(`Deleted ${numDeleted} messages`);
}

main().then(process.exit);
