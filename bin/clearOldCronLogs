#!/usr/bin/env node

require('isomorphic-fetch');
require('dotenv').config();
const path = require('path');
const fs = require('fs');

const { WebClient } = require('@slack/client');

const token = process.env.SLACK_API_TOKEN_DREW_AND_KRISTA || '';
const web = new WebClient(token);

async function main() {
	const day = 86400000;
	const expirationDate = Date.now() - 1 * day;

	// TODO: theoretically I should support pagination here, but if I'm going to
	// delete 100 old messages every hour I shouldn't have a problem
	const response = await web.apiCall('conversations.history', {
		channel: process.env.CRON_LOGS_CHANNEL_ID,
		limit: 100,
		latest: expirationDate / 1000,
	});
	const { messages } = response;
	let numDeleted = 0;

	await Promise.all(
		messages.map(async (message) => {
			const { ts } = message;
			const time = parseInt(ts.split('.')[0], 10) * 1000;
			if (time < expirationDate) {
				// console.log('Need to delete this message: ', new Date(time) /* message.text */);
				return web
					.apiCall('chat.delete', {
						channel: process.env.CRON_LOGS_CHANNEL_ID,
						ts,
					})
					.then(() => {
						numDeleted += 1;
					});
			}

			return true;
		})
	);
	console.log(`Deleted ${numDeleted} messages`);
}

main().then(process.exit);
