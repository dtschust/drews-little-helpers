#!/usr/bin/env node

require('dotenv').config();
require('isomorphic-fetch');
const mongoose = require('mongoose');

const { WebClient } = require('@slack/client');

const token = process.env.SLACK_API_TOKEN || '';
const web = new WebClient(token);

mongoose.Promise = global.Promise;
mongoose.connect(process.env.MONGO_DB_URI, {
	useNewUrlParser: true,
	useUnifiedTopology: true,
});
const SavedToots = mongoose.model('SavedToots', {
	savedIds: Object,
});

let SAVED_TOOTS;
SavedToots.findOne(undefined)
	.exec()
	.then((newSavedToots) => {
		if (newSavedToots) {
			SAVED_TOOTS = newSavedToots.savedIds || {};
		}
		fetchMastodonFavs();
	})
	.catch((e) => {
		console.log('Huh, we have an error', e);
		process.exit(0);
	});

function fetchMastodonFavs() {
	return fetch(
		`${process.env.MASTODON_INSTANCE_URL}/api/v1/favourites?access_token=${process.env.MASTODON_TOKEN}&limit=40`
	)
		.then((response) => response.json())
		.then((favs) => {
			console.log(`Fetched ${favs.length} favs`);
			const pinboardPostPromises = [];
			favs.forEach(({ content, url, account, id }) => {
				const description = `Mastodon post from ${account.display_name} (${account.acct})`;
				const extended = `${content}`;

				if (account.acct.indexOf('toot.rip') >= 0) {
					// Don't bookmark toot.rip favs, because
					// those get propogated to twitter and pinboard
					// automatically bookmarks all my faved tweets
					return;
				}
				// Only post to pinboard if you haven't before
				if (SAVED_TOOTS && !SAVED_TOOTS[id]) {
					const digest = `â€¢ ${description} (${url})`;
					console.log(`Saving to pinboard: ${digest}`);

					const linkRegex = /href="([^\s]*)" rel/g;
					let matches;

					const links = [];
					// eslint-disable-next-line no-cond-assign
					while ((matches = linkRegex.exec(content))) {
						links.push(matches[1]);
					}

					const bookmarksToMake = [{ url, description, content, digest }].concat(
						links.map((link) => ({
							url: link,
							description: link,
							digest: link,
						}))
					);
					bookmarksToMake.forEach(
						// eslint-disable-next-line no-shadow
						({ url, description, content = '', digest }) =>
							pinboardPostPromises.push(
								fetch(
									`${process.env.PINBOARD_API_URL}?url=${encodeURI(
										url
									)}&description=${encodeURI(description)}&extended=${encodeURI(
										content
									)}&tags=${encodeURI(['mastodonFav'])}`
								)
									.then((resp) => resp.text())
									.then((resp) => {
										if (!resp || !resp.indexOf('<result code="done" />')) {
											throw new Error(
												`Pinboard write failed with error ${resp}`
											);
										}
										console.log(`Successfully saved to pinboard: ${digest}`);
										SAVED_TOOTS[id] = true;
										return digest;
									})
									.catch((e) => {
										console.log('Error saving this toot!', url, extended);
										console.log('error:', e);
										SAVED_TOOTS[id] = false;
										throw e;
									})
							)
					);
				}
			});
			Promise.all(pinboardPostPromises)
				.then(async ([...digests]) => {
					if (digests.length === 0) {
						console.log('No new bookmarks!');
						process.exit(0);
					}
					console.log('posting to slack', digests);
					sendMessage(`New bookmarks!
${digests.join('\n')}`)
						.catch((err) => {
							console.log('Error posting update to slack', err);
						})
						.then(() => {
							// remove old savedToots map, we've got a new one to store!
							console.log('Done saving, now let us persist to mongo!');
							SavedToots.remove(undefined, (err) => {
								if (err) {
									console.log('Error removing from database', err);
								}
								const newSavedTootsModel = new SavedToots({
									savedIds: SAVED_TOOTS,
								});
								// store the new savedToots map!
								newSavedTootsModel.save((saveErr) => {
									if (saveErr) {
										console.log('Error saving to database', saveErr);
									}
									console.log(
										`done! Saved ${pinboardPostPromises.length} new bookmarks`
									);
									process.exit(0);
								});
							});
						});
				})
				.catch((e) => {
					console.log('Error for some reason', e);
					process.exit(0);
				});
		});
}

function sendMessage(text) {
	return web.chat.postMessage({
		channel: process.env.MASTODON_FAVS_SLACK_CHANNEL_ID,
		text,
	});
}
