#!/usr/bin/env node

require('isomorphic-fetch');
require('dotenv').config();
const puppeteer = require('puppeteer');
const mongoose = require('mongoose');
const { getDrewsHelpfulRobot } = require('../src/utils/slack');

const { sendMessageToFollowShows } = getDrewsHelpfulRobot();

mongoose.Promise = global.Promise;
mongoose.connect(process.env.MONGO_DB_URI, {
	useNewUrlParser: true,
	useUnifiedTopology: true,
});

const GaryPageContent = mongoose.model('GaryPageContent', {
	pageContent: String,
});

let OLD_PAGE_CONTENT = {};
GaryPageContent.findOne(undefined)
	.exec()
	.then((newData) => {
		if (newData) {
			OLD_PAGE_CONTENT = {
				pageContent: newData.get('pageContent'),
			};
		}
		checkForUpdates().then(process.exit); // eslint-disable-line no-use-before-define
	})
	.catch(() => {
		checkForUpdates().then(process.exit); // eslint-disable-line no-use-before-define
	});

async function checkForUpdates() {
	const browser = await puppeteer.launch({
		headless: true,
		args: ['--no-sandbox', '--disable-setuid-sandbox'],
	});
	const page = await browser.newPage();
	await page.goto('https://www.garykamiya.com/');

	const contentDiv = await page.$('#content');
	const contentText = await page.evaluate((el) => el.innerText, contentDiv);

	if (contentText !== OLD_PAGE_CONTENT.pageContent) {
		console.log('New updates!');
		await sendMessageToFollowShows(`New updates from Gary Kamiya at https://www.garykamiya.com!
${contentText}`);
		await GaryPageContent.deleteMany(undefined).then(async () => {
			const newGaryPageContent = new GaryPageContent({
				pageContent: contentText,
			});
			await newGaryPageContent.save().then(() => {
				console.log('New page content saved to database');
			});
		});
	} else {
		console.log('No Updates!');
	}
}
