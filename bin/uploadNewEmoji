#!/usr/bin/env node

require('isomorphic-fetch');
require('dotenv').config();
const path = require('path');
const fs = require('fs');

const { WebClient } = require('@slack/client');

const token = process.env.SLACK_API_TOKEN_DREW_AND_KRISTA || '';
const web = new WebClient(token);

let folderPath = path.resolve(process.argv[2]);

let endpoint = 'emoji.add';
if (process.argv[3] === 'delete') {
	endpoint = 'emoji.remove';
}

console.log(folderPath);
let files;

if (fs.existsSync(folderPath) && fs.lstatSync(folderPath).isDirectory()) {
	files = fs.readdirSync(folderPath);
} else {
	files = [path.basename(folderPath)];
	folderPath = path.dirname(folderPath);
}

const promises = [];
files.forEach(file => {
	// Do whatever you want to do with the file
	const [filename, extension] = file.split('.');
	if (!extension || !['png', 'gif'].includes(extension.toLocaleLowerCase())) {
		return;
	}

	promises.push(
		web
			.apiCall(endpoint, {
				mode: 'data',
				name: filename,
				image: fs.readFileSync(path.resolve(folderPath, file)),
			})
			.then(response => {
				console.log(
					`successfully ${
						endpoint === 'emoji.add' ? 'uploaded' : 'deleted'
					} ${filename}, ${JSON.stringify(response)}`,
				);
			})
			.catch(error => {
				console.error(`oh no failure with ${filename}, ${error}`);
			}),
	);

	console.log(file);
});
Promise.all(promises).then(() => {
	process.exit(0);
});
