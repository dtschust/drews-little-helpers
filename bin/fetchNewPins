#!/usr/bin/env node

require('isomorphic-fetch');
require('dotenv').config();
const _ = require('lodash');
const mongoose = require('mongoose');

const { WebClient } = require('@slack/client');

const token = process.env.SLACK_NEW_PINS_TOKEN || '';
const web = new WebClient(token);

mongoose.Promise = global.Promise;
mongoose.connect(process.env.MONGO_DB_URI, {
	useNewUrlParser: true,
	useUnifiedTopology: true,
});

process.on('unhandledRejection', (error) => {
	console.log('unhandledRejection', error);
	process.exit(1);
});

const PinModel = mongoose.model('Pins', {
	pins: Object,
});

let storedPinModel;
PinModel.findOne(undefined)
	.exec()
	.then((newPinModel) => {
		if (newPinModel) {
			storedPinModel = {
				pins: newPinModel.get('pins'),
			};
		} else {
			storedPinModel = { pins: {} };
		}
		fetchNewPins();
	})
	.catch((e) => {
		console.log('Huh, we have an error', e);
		process.exit(0);
	});

async function fetchNewPins() {
	web.apiCall('search.messages', {
		query: process.env.SLACK_NEW_PINS_QUERY,
	}).then((response) => {
		const matches = (response && response.messages && response.messages.matches) || [];
		if (!matches.length) {
			console.error('no matches?');
			process.exit(1);
		}

		const freshTimestamps = matches.map((message) => message.ts.replace('.', ''));

		const oldTimestamps =
			(storedPinModel && storedPinModel.pins && Object.keys(storedPinModel.pins)) || [];
		const addedTimestamps = _.difference(freshTimestamps, oldTimestamps);

		if (addedTimestamps.length > 30) {
			console.log('Something went terribly wrong, too many results. do nothing');
			process.exit(1);
		}
		if (addedTimestamps.length || _.isEmpty(storedPinModel && storedPinModel.pins)) {
			PinModel.remove(undefined, (err) => {
				addedTimestamps.forEach((timestamp) => {
					storedPinModel.pins[timestamp] = timestamp;
				});

				const newStoredPinModel = new PinModel(storedPinModel);

				if (err) {
					console.log('Error removing from database', err);
					process.exit(1);
				}

				// Promise.resolve().then(saveErr => {
				newStoredPinModel.save((saveErr) => {
					if (saveErr) {
						console.log('Error saving to database', saveErr);
						process.exit(1);
					}
					console.log(`done! Saved new ${addedTimestamps.length} pins!`);

					const promises = addedTimestamps.map((timestamp) => {
						const message = matches.find(
							(msg) => msg.ts.replace('.', '') === timestamp
						);
						const { permalink } = message;
						return web.reactions
							.get({
								channel: process.env.SLACK_NEW_PINS_CHANNEL,
								timestamp: message.ts,
							})
							.then((reactionsResp) => {
								const pinReaction = (
									(reactionsResp &&
										reactionsResp.message &&
										reactionsResp.message.reactions) ||
									[]
								).find(
									(reaction) =>
										reaction && reaction.name === 'pinned-on-the-patio'
								);
								const firstUser =
									pinReaction && pinReaction.users && pinReaction.users[0];
								const pinnedBy = firstUser ? ` pinned by <@${firstUser}>` : '';
								return web.chat.postMessage({
									channel: process.env.SLACK_NEW_PINS_CHANNEL,
									text: ` :pinned-on-the-patio: New "pin"${pinnedBy}\n${permalink}`,
									emoji: true,
									reply_broadcast: true,
									thread_ts: process.env.SLACK_NEW_PINS_THREAD,
								});
							});
					});
					Promise.all(promises).then(() => {
						process.exit(0);
					});
				});
			});
		} else {
			console.log('no new pins found, exiting');
			process.exit(0);
		}
	});
}
