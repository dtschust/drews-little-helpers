#!/usr/bin/env node

require('isomorphic-fetch');
require('dotenv').config();
const puppeteer = require('puppeteer');
const TopMovies = require('../src/mongoose-models/Top-Movies');
const PtpCookie = require('../src/mongoose-models/Ptp-Cookie');
const getPtpLoginCookies = require('../src/utils/get-ptp-login-cookie');
require('../src/utils/mongoose-connect');

const { getDrewsHelpfulRobot } = require('../src/utils/slack');

const { sendMessageToFollowShowsAsMovies } = getDrewsHelpfulRobot();

const myArgs = process.argv.slice(2);
const isWeekly = myArgs.length && myArgs[0] === 'week';

async function getPersistedLoginCookies() {
	try {
		const { cookie } = await PtpCookie.findOne();
		return cookie;
	} catch (e) {
		return null;
	}
}

async function getLoginCookies() {
	const cookie = await getPtpLoginCookies();
	return cookie;
}

async function main(usePersistedCookies = true) {
	const browser = await puppeteer.launch({
		headless: true,
		args: ['--no-sandbox', '--disable-setuid-sandbox'],
	});
	const page = await browser.newPage();

	const rawCookies = usePersistedCookies
		? await getPersistedLoginCookies()
		: await getLoginCookies();

	if (!rawCookies && usePersistedCookies) {
		console.log('Persisted slack cookies not found. Falling back to signing in');
		// Try again with logging in
		return main(false);
	}

	// TODO: clean up this double map thing
	const cookies = rawCookies
		.split(';')
		// Add a ; to the end of each cookie so the processing works
		.map((c) => `${c};`)
		.map((cookie) => {
			const [name, value] = cookie.split(';')[0].split('=');
			return { name, value, url: 'https://passthepopcorn.me' };
		});

	await Promise.all(
		cookies.map((cookie) => {
			return page.setCookie(cookie);
		})
	);

	await page.goto('https://passthepopcorn.me/top10.php');
	const topMovies = await page.$('[data-coverviewindex="1"]');

	if (!topMovies && usePersistedCookies) {
		console.log('Persisted slack cookies were invalid. Falling back to signing in');
		// Try again with logging in
		return main(false);
	}

	const titles = await page.$$('[data-coverviewindex="1"] .cover-movie-list__movie__title');
	const titlesInfo = await Promise.all(
		titles.map((t) => {
			return page.evaluate((el) => {
				return {
					href: el.href,
					title: el.innerText,
					id: el.href.split('id=')[1],
				};
			}, t);
		})
	);
	const moviePosterElements = await page.$$(
		'[data-coverviewindex="1"] .cover-movie-list__movie__cover-link'
	);
	const moviePosters = await Promise.all(
		moviePosterElements.map((t) => {
			return page.evaluate((el) => {
				return el.style.background.match(/url\("(.*)"\)/)[1];
			}, t);
		})
	);
	moviePosters.forEach((url, i) => {
		titlesInfo[i].posterUrl = url;
	});

	const movieYearsElements = await page.$$(
		'[data-coverviewindex="1"] .cover-movie-list__movie__year'
	);
	const movieYears = await Promise.all(
		movieYearsElements.map((t) => {
			return page.evaluate((el) => {
				// eslint-disable-next-line no-useless-escape
				return el.innerText.replace(/[\[\]]/g, '');
			}, t);
		})
	);
	movieYears.forEach((year, i) => {
		titlesInfo[i].year = year;
	});

	const topMoviesModel = new TopMovies({
		movies: titlesInfo,
	});
	await TopMovies.deleteMany();
	await topMoviesModel.save();

	await page.close(); // Close the website

	await browser.close();

	if (isWeekly) {
		await sendMessageToFollowShowsAsMovies(
			'*Top 10 Most Active Movies Uploaded in the Past Week*'
		);
		for (const titleInfo of titlesInfo) {
			const { title, id, posterUrl, year } = titleInfo;
			const attachment = {
				title,
				fallback: 'TODO',
				callback_id: title,
				image_url: posterUrl,
				actions: [
					{
						name: `searchMovie ${title}`,
						text: `Select ${title} (${year})`,
						type: 'button',
						value: id,
					},
				],
			};
			await sendMessageToFollowShowsAsMovies(' ', {
				attachments: [attachment],
			});
		}
	}
	console.log('Success!');
	return 0;
}

main().then(process.exit);
