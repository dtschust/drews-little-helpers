#!/usr/bin/env node

require('isomorphic-fetch');
require('dotenv').config();
const request = require('request');
const puppeteer = require('puppeteer');
const { WebClient } = require('@slack/client');
const mongoose = require('mongoose');
const TopMovies = require('../src/Top-Movies');

const token = process.env.SLACK_API_TOKEN || '';
const web = new WebClient(token);

mongoose.Promise = global.Promise;
mongoose.connect(process.env.MONGO_DB_URI, {
	useNewUrlParser: true,
	useUnifiedTopology: true,
});

function sendMessage(text) {
	return web.chat.postMessage({
		channel: process.env.PTP_SLACK_CHANNEL_ID,
		text,
	});
}

const myArgs = process.argv.slice(2);
const isWeekly = myArgs.length && myArgs[0] === 'week';

async function getLoginCookies() {
	return new Promise((resolve) => {
		request.post(
			'https://passthepopcorn.me/ajax.php?action=login',
			{
				form: {
					username: process.env.PTP_USERNAME,
					password: process.env.PTP_PASSWORD,
					passkey: process.env.PTP_PASSKEY,
					// WhatsYourSecret:
					// 	'Hacker! Do you really have nothing better do than this?',
					keeplogged: 0,
				},
			},
			(error, response) => {
				if (response.statusCode === 403) {
					console.log('Looks I got captcha-ed, giving up!');
					process.exit(1);
				}

				const cookies = response.headers['set-cookie'];
				resolve(cookies);
			}
		);
	});
}

async function main() {
	const browser = await puppeteer.launch({
		headless: true,
		args: ['--no-sandbox', '--disable-setuid-sandbox'],
	});
	const page = await browser.newPage();

	const rawCookies = await getLoginCookies();
	const cookies = rawCookies.map((cookie) => {
		const [name, value] = cookie.split(';')[0].split('=');
		return { name, value, url: 'https://passthepopcorn.me' };
	});

	await Promise.all(
		cookies.map((cookie) => {
			return page.setCookie(cookie);
		})
	);

	await page.setViewport({
		width: 640,
		height: 480,
		deviceScaleFactor: 2,
	});
	await page.goto('https://passthepopcorn.me/top10.php');
	const topMovies = await page.$('[data-coverviewindex="1"]');
	await topMovies.evaluate((el) => {
		// eslint-disable-next-line
		el.style.width = `${600}px`;
	});
	const titles = await page.$$('[data-coverviewindex="1"] .cover-movie-list__movie__title');
	const titlesInfo = await Promise.all(
		titles.map((t) => {
			return page.evaluate((el) => {
				return {
					href: el.href,
					title: el.innerText,
					id: el.href.split('id=')[1],
				};
			}, t);
		})
	);
	const moviePosterElements = await page.$$(
		'[data-coverviewindex="1"] .cover-movie-list__movie__cover-link'
	);
	const moviePosters = await Promise.all(
		moviePosterElements.map((t) => {
			return page.evaluate((el) => {
				return el.style.background.match(/url\("(.*)"\)/)[1];
			}, t);
		})
	);
	moviePosters.forEach((url, i) => {
		titlesInfo[i].posterUrl = url;
	});

	const topMoviesModel = new TopMovies({
		movies: titlesInfo,
	});
	await TopMovies.deleteMany();
	await topMoviesModel.save();

	let screenshot;
	if (isWeekly) {
		screenshot = await topMovies.screenshot();
	}

	await page.close(); // Close the website

	await browser.close();

	if (isWeekly) {
		await sendMessage('*Top 10 Most Active Movies Uploaded in the Past Week*');
		await web.files.upload({
			channels: process.env.PTP_SLACK_CHANNEL_ID,
			file: screenshot,
		});
		await sendMessage(titlesInfo.map(({ href, title }) => `<${href}|${title}>`).join('\n'));
	}
	console.log('Success!');
}

main().then(process.exit);
