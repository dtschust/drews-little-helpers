#!/usr/bin/env node

require('isomorphic-fetch');
require('dotenv').config();
const mongoose = require('mongoose');

const { WebClient } = require('@slack/client');

const token = process.env.SLACK_API_TOKEN || '';
const web = new WebClient(token);

mongoose.Promise = global.Promise;
mongoose.connect(process.env.MONGO_DB_URI, {
	useNewUrlParser: true,
	useUnifiedTopology: true,
});

process.on('unhandledRejection', (error) => {
	console.log('unhandledRejection', error);
	process.exit(1);
});

const RecDiffsEpisodesModel = mongoose.model('RecDiffsEpisodes', {
	episodes: Object,
	order: [String],
});

let storedEpisodesModel;
RecDiffsEpisodesModel.findOne(undefined)
	.exec()
	.then((newStoredEpisodesModel) => {
		if (newStoredEpisodesModel) {
			storedEpisodesModel = {
				episodes: newStoredEpisodesModel.get('episodes'),
				order: newStoredEpisodesModel.get('order'),
			};
		} else {
			storedEpisodesModel = { episodes: {}, order: [] };
		}
		fetchNewEpisodes();
	})
	.catch((e) => {
		console.log('Huh, we have an error', e);
		process.exit(0);
	});

async function fetchNewEpisodes() {
	let nextEpisodeNumber;
	try {
		const mostRecentEpisodeKey =
			storedEpisodesModel.order[storedEpisodesModel.order.length - 1];
		const mostRecentEpisodeUrl = storedEpisodesModel.episodes[mostRecentEpisodeKey].url;
		const mostRecentEpisodeNumber = parseInt(
			mostRecentEpisodeUrl.match(/recdifferences(\d*).mp3/)[1],
			10
		);
		nextEpisodeNumber = mostRecentEpisodeNumber + 1;
	} catch (e) {
		nextEpisodeNumber = 84;
	}

	const newEpisodeUrl = `https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/recdiffs/recdifferences${lpad(
		nextEpisodeNumber,
		3
	)}.mp3`;
	console.log(newEpisodeUrl);
	const newEpisodeResponse = await fetch(newEpisodeUrl);
	if (newEpisodeResponse.status !== 200) {
		console.log('No new episode found');
		process.exit(0);
	}

	const newEpisode = {
		url: newEpisodeUrl,
		title: `Reconcilable Differences ${nextEpisodeNumber}`,
		pubDate: pubDate(new Date()),
	};

	const urlKey = newEpisode.url.replace(/\./g, ''); // can't store periods in keys for mongodb
	if (!storedEpisodesModel.episodes[urlKey]) {
		storedEpisodesModel.episodes[urlKey] = newEpisode;
		storedEpisodesModel.order.push(urlKey);
	}

	// remove old map, we've got a new one to store!
	RecDiffsEpisodesModel.deleteMany(undefined, (err) => {
		console.log('new model!', storedEpisodesModel);
		const newStoredEpisodesModel = new RecDiffsEpisodesModel(storedEpisodesModel);

		if (err) {
			console.log('Error removing from database', err);
			process.exit(1);
		}
		// store the new savedToots map!
		newStoredEpisodesModel.save((saveErr) => {
			if (saveErr) {
				console.log('Error saving to database', saveErr);
				process.exit(1);
			}
			console.log(`done! Saved new episode #${nextEpisodeNumber}!`);
			web.chat
				.postMessage({
					channel: process.env.FEMFREQ_SLACK_CHANNEL_ID,
					text: `New episode of Reconcilable Differences posted, #${nextEpisodeNumber}!`,
				})
				.then(() => {
					process.exit(0);
				});
		});
	});
}

function pubDate(date = new Date()) {
	const pieces = date.toString().split(' ');

	const offsetTime = pieces[5].match(/[-+]\d{4}/);

	const offset = offsetTime || pieces[5];

	const parts = [`${pieces[0]},`, pieces[2], pieces[1], pieces[3], pieces[4], offset];

	return parts.join(' ');
}

function lpad(value, padding) {
	const zeroes = new Array(padding + 1).join('0');
	return (zeroes + value).slice(-padding);
}
