#!/usr/bin/env node

/* eslint-disable camelcase */

require('dotenv').config();
require('isomorphic-fetch');
const _ = require('lodash');
const Twit = require('twit');
const mongoose = require('mongoose');
const rp = require('request-promise');
const cheerio = require('cheerio');
const moment = require('moment');

const { WebClient } = require('@slack/client');

const token = process.env.SLACK_API_TOKEN || '';
const web = new WebClient(token);

const T = new Twit({
	consumer_key: process.env.TWITTER_CONSUMER_KEY,
	consumer_secret: process.env.TWITTER_CONSUMER_SECRET,
	access_token: process.env.TWITTER_ACCESS_TOKEN,
	access_token_secret: process.env.TWITTER_ACCESS_TOKEN_SECRET,
	timeout_ms: 60 * 1000, // optional HTTP request timeout to apply to all requests.
	strictSSL: true, // optional - requires SSL certificates to be valid.
});

mongoose.Promise = global.Promise;
mongoose.connect(
	process.env.MONGO_DB_URI,
	{
		useMongoClient: true,
	},
);
const SavedTwitterFavs = mongoose.model('SavedTwitterFavs', {
	savedUrls: Object,
});

let SAVED_TWITTER_FAVS = {};
SavedTwitterFavs.findOne(undefined)
	.exec()
	.then(newSavedTwitterFavs => {
		if (newSavedTwitterFavs) {
			SAVED_TWITTER_FAVS = newSavedTwitterFavs.savedUrls || {};
		}
		fetchAndProcessTwitterFavs();
	})
	.catch(e => {
		console.log('Huh, we have an error', e);
		process.exit(0);
	});

const oldestDate = new Date('01/01/2016').getTime();
const now = Date.now();

async function fetchAndProcessTwitterFavs() {
	const favs = await fetchTwitterFavs();
	let websites =
		// Grab all urls and store as { url, description }
		_.flatten(
			favs
				.filter(({ entities }) => entities.urls.length > 0)
				.map(({ entities, user, id_str, full_text }) =>
					entities.urls.map(({ expanded_url }) => ({
						url: expanded_url,
						description: `via tweet: https://twitter.com/${
							user.screen_name
						}/status/${id_str} : ${full_text}`,
					})),
				),

			// Filter out any that have already been saved to pinboard
		).filter(({ url }) => !SAVED_TWITTER_FAVS[getUrlKey(url)]);

	// Add page titles to the sites
	websites = await Promise.all(
		websites.map(({ url, description }) =>
			rp(url)
				.then(htmlString => {
					const $ = cheerio.load(htmlString);
					const title =
						$('title')
							.eq(0)
							.text()
							.trim() || 'untitled';
					return { url, description, title };
				})
				.catch(err => {
					console.log(`Error fetching title for ${url} : ${err}`);
					// Crawling failed...
					return { url, description, title: 'Cannot fetch title' };
				}),
		),
	);

	const tweetsToFav = favs
		.filter(({ user, id_str }) => {
			const permalink = `https://twitter.com/${
				user.screen_name
			}/status/${id_str}`;
			return !SAVED_TWITTER_FAVS[getUrlKey(permalink)];
		})
		.map(({ user, created_at, full_text, id_str }) => {
			const url = `https://twitter.com/${user.screen_name}/status/${id_str}`;
			const description = full_text;
			const title = `Tweet from ${user.screen_name} on ${moment(
				new Date(created_at),
			).format('lll')}`;
			return { url, title, description };
		});

	const toPostToPinboard = websites.concat(tweetsToFav);

	if (toPostToPinboard.length === 0) {
		console.log('no new bookmarks!');
		process.exit(0);
	}

	await Promise.all(
		toPostToPinboard.map(({ url, title, description }) =>
			fetch(
				`${process.env.PINBOARD_API_URL}?url=${encodeURI(
					url,
				)}&description=${encodeURI(title)}&extended=${encodeURI(
					description,
				)}&tags=${encodeURI(['customTwitterFav'])}`,
			)
				.then(resp => resp.text())
				.then(resp => {
					if (!resp || !resp.indexOf('<result code="done" />')) {
						throw new Error(`Pinboard write failed with error ${resp}`);
					}
					console.log(
						`Successfully saved to pinboard: ${title} ${description} ${url}`,
					);
					SAVED_TWITTER_FAVS[getUrlKey(url)] = now;
				})
				.catch(async e => {
					console.log('Error saving this bookmark!', url, description, title);
					console.log('error:', e);
					await sendMessage(
						`Error saving bookmark: ${url} ${description} ${title} ${e}`,
					);
					delete SAVED_TWITTER_FAVS[getUrlKey(url)];
				}),
		),
	);

	console.log('Done saving, now let us persist to mongo!');
	SavedTwitterFavs.remove(undefined, err => {
		if (err) {
			console.log('Error removing from database', err);
		}
		const newSavedTwitterFavs = new SavedTwitterFavs({
			savedUrls: SAVED_TWITTER_FAVS,
		});
		// store the new savedToots map!
		newSavedTwitterFavs.save(async saveErr => {
			if (saveErr) {
				console.log('Error saving to database', saveErr);
			}

			await sendMessage(`New Bookmarks!
${toPostToPinboard.map(({ title, url }) => `â€¢ ${title}: ${url}`).join('\n')}`);
			console.log(`done! Saved ${toPostToPinboard.length} new bookmarks`);
			process.exit(0);
		});
	});
}

function getUrlKey(url) {
	return url.replace(/\./g, ''); // can't store periods in keys for mongodb
}

function fetchTwitterFavs(maxId, prevResults = []) {
	return T.get('favorites/list', {
		screen_name: 'nuncamind',
		count: 200,
		include_entities: true,
		tweet_mode: 'extended',
		max_id: maxId,
	})
		.then(result => {
			const { data } = result;
			console.log(`Fetched ${data.length}`);
			const results = prevResults.concat(data);
			if (!data.length) {
				console.log('no data');
				return results;
			}

			const { created_at: lastCreatedAt, id: lastId } = data[data.length - 1];

			const ts = new Date(lastCreatedAt).getTime();

			if (ts >= oldestDate) {
				console.log(`Fetching more`);
				return fetchTwitterFavs(lastId, results);
			}
			return results;
		})
		.catch(async err => {
			console.log('ERROR: ', err);
			await sendMessage(`Error: ${err}`);
			process.exit(0);
		});
}

function sendMessage(text) {
	return web.chat.postMessage({
		channel: process.env.TWITTER_FAVS_SLACK_CHANNEL_ID,
		text,
	});
}
